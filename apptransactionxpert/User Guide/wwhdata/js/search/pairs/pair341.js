function FileData_Pairs(x)
{
x.t("complex","application");
x.t("example",".aed.m");
x.t("example","consider");
x.t("example","child_params");
x.t("supports","keyword");
x.t("modes","blocking");
x.t("modes","determine");
x.t("four","actions");
x.t("equal","rest");
x.t("equal","my_string");
x.t("blocking","mode");
x.t("blocking","(true)");
x.t("blocking","non-blocking");
x.t("blocking","optional");
x.t("blocking","child");
x.t("method","supports");
x.t("method","raises");
x.t("method","invokes");
x.t("method","override");
x.t("method","object");
x.t("modeling","complex");
x.t("shown","blocking");
x.t("def","my_completion_func");
x.t("description","blocking");
x.t("description","parent_action");
x.t("callback","function");
x.t("events","executed");
x.t("home","back");
x.t("action","stack");
x.t("action","parent");
x.t("action","data");
x.t("action","child_task_2821.aed.m");
x.t("action","task_name");
x.t("action","class");
x.t("completion","functions");
x.t("completion","defined");
x.t("completion","child");
x.t("arguments","callback");
x.t("arguments","accessed");
x.t("arguments","return");
x.t("arguments","specify");
x.t("u.s","patents");
x.t("user","guide");
x.t("current","action");
x.t("current","message");
x.t("scripts","application_base");
x.t("set","changes");
x.t("mode","calls");
x.t("mode","however");
x.t("mode","appended");
x.t("mode","added");
x.t("notices","section");
x.t("support","center");
x.t("application_base","syntax");
x.t("application_base","class");
x.t("type","description");
x.t("type","none");
x.t("flavor","vanilla");
x.t("child_tier","parent_tier");
x.t("response","details");
x.t("response","message");
x.t("calls","second");
x.t("calls","child");
x.t("time","actions");
x.t("editing","designing");
x.t("bound","method");
x.t("however","calls");
x.t("tier_map","dictionary");
x.t("tier_map","argument");
x.t("tier_map","task_completion_function");
x.t("listed","mod_dirs");
x.t("back","top");
x.t("details","method");
x.t("details","task_completion_function");
x.t("size",":256");
x.t("block","method");
x.t("block","following");
x.t("usually","bad");
x.t("top","2013");
x.t("file","directory");
x.t("file","elements");
x.t("(false)","task_params");
x.t("continues","calls");
x.t("continues","is_blocking");
x.t("invoked","two");
x.t("invoked","child");
x.t("list","executed");
x.t("self.invoke_child_task","action");
x.t("self.invoke_child_task","parent_action");
x.t("complete","completion");
x.t("complete","patent");
x.t("actions","logic");
x.t("actions","non-blocking");
x.t("actions","parent");
x.t("actions","child");
x.t("actions","performed");
x.t("guide","editing");
x.t(":256","flavor");
x.t("false","child");
x.t("fails","usually");
x.t("defaults","empty");
x.t("true","child_params");
x.t("true","child");
x.t("specified","values");
x.t("specified","transaction");
x.t("specified","task_name");
x.t("receipt","child");
x.t("name","task");
x.t("name","value");
x.t("path","suffix");
x.t("mod_dirs","preference");
x.t("(true)","(false)");
x.t("operation","elements");
x.t("dictionary","set");
x.t("dictionary","tier_map");
x.t("dictionary","given");
x.t("dictionary","mapping");
x.t("dictionary","task_completion_function");
x.t("tasks","invoked");
x.t("tasks","operation");
x.t("(a)","comprising");
x.t("parent_action","action");
x.t("parent_action","task_name");
x.t("argument","blocking");
x.t("argument","type");
x.t("argument","specify");
x.t("preference","is_blocking");
x.t("vanilla","self.invoke_child_task");
x.t("raises","python");
x.t("boolean","whether");
x.t("parameters","specified");
x.t("parameters","child");
x.t("none","example");
x.t("whiteboard","modeling");
x.t("whiteboard","scripting");
x.t("determine","actions");
x.t("appended","child");
x.t("final","response");
x.t("stack","ahead");
x.t("rest","body");
x.t("string","name");
x.t("empty","dictionary");
x.t("scripting","manage");
x.t("accessed","unpacking");
x.t("flow","events");
x.t("three","actions");
x.t("second","blocking");
x.t("second","c\u2019s");
x.t("patent","notice");
x.t("functions","task_completion_data");
x.t("functions","task_completion_function");
x.t("legal","notices");
x.t("logic","scripts");
x.t("logic","script");
x.t("python","function");
x.t("python","exception");
x.t("my_completion_func","self");
x.t("point","arg1");
x.t("body","function");
x.t("notice","legal");
x.t("invokes","child");
x.t("syntax","self.invoke_child_task");
x.t(".aed.m","path");
x.t("task\u2019s","final");
x.t("ahead","b\u2019s");
x.t("ahead","thus");
x.t("is_blocking","false");
x.t("is_blocking","true");
x.t("is_blocking","boolean");
x.t("is_blocking","task_params");
x.t("(c)","calling");
x.t("first","completion");
x.t("non-blocking","modes");
x.t("non-blocking","mode");
x.t("parent","method");
x.t("parent","current");
x.t("parent","task");
x.t("function","home");
x.t("function","block");
x.t("function","invoked");
x.t("function","optional");
x.t("function","called");
x.t("b\u2019s","actions");
x.t("2013","riverbed");
x.t("whether","child");
x.t("tiers","parent");
x.t("tiers","optional");
x.t("tiers","child");
x.t("software","may");
x.t("may","covered");
x.t("my_string","details");
x.t("my_string","arg2");
x.t("detailed","description");
x.t("directory","listed");
x.t("changes","parameters");
x.t("keyword","arguments");
x.t("format","def");
x.t("section","riverbed");
x.t("tuple","arguments");
x.t("tuple","arg1");
x.t("added","action");
x.t("calling","added");
x.t("self","action");
x.t("task","example");
x.t("task","blocking");
x.t("task","current");
x.t("task","file");
x.t("task","continues");
x.t("task","complete");
x.t("task","(a)");
x.t("task","parameters");
x.t("task","(c)");
x.t("task","non-blocking");
x.t("task","tiers");
x.t("task","detailed");
x.t("task","end");
x.t("task","optional");
x.t("task","call");
x.t("task","(b)");
x.t("task","merged");
x.t("task","completely");
x.t("end","stage");
x.t("executed","parent");
x.t("executed","concurrently");
x.t("executed","simulation");
x.t("designing","applications");
x.t("abstract","invokes");
x.t("return","type");
x.t("stage","current");
x.t("override","mapping");
x.t("thus","even");
x.t("given","child_tier");
x.t("given","name");
x.t("given",".atc.m");
x.t("message","final");
x.t("message","is_blocking");
x.t("parent_tier","order");
x.t("task_params","tier_map");
x.t("task_params","dictionary");
x.t("task_params","argument");
x.t("upon","completion");
x.t("self.my_completion_func","my_string");
x.t("consider","task");
x.t("consider","child");
x.t("include","suffix");
x.t("technology","software");
x.t("value","order");
x.t("exception","fails");
x.t("unpacking","data");
x.t("script","consider");
x.t("optional","method");
x.t("optional","tier_map");
x.t("optional","defaults");
x.t("optional","task_params");
x.t("optional","information");
x.t("optional","task_completion_function");
x.t("information","completion");
x.t("data","point");
x.t("data","tuple");
x.t("data","individual");
x.t("defined","receipt");
x.t("defined","function");
x.t("arg1","equal");
x.t("arg1","arg2");
x.t("application","behavior");
x.t("values","specified");
x.t("values","parameters");
x.t("arg2","equal");
x.t("arg2","data");
x.t("invoke_child_task","user");
x.t("invoke_child_task","abstract");
x.t("invoke_child_task","invoke_child_task");
x.t("called","second");
x.t("called","upon");
x.t("child_task_2821.aed.m","true");
x.t("transaction","whiteboard");
x.t("two","modes");
x.t("applications","transaction");
x.t("task_name","file");
x.t("task_name","string");
x.t("task_name","is_blocking");
x.t("riverbed","support");
x.t("riverbed","technology");
x.t("call","include");
x.t("mapping","specified");
x.t("mapping","tiers");
x.t("mapping","child");
x.t("concurrently","parent");
x.t("order","optional");
x.t("task_completion_function","bound");
x.t("task_completion_function","defined");
x.t("task_completion_function","task_completion_data");
x.t("task_completion_data","arguments");
x.t("task_completion_data","argument");
x.t("task_completion_data","tuple");
x.t(".atc.m","assumed");
x.t("elements","dictionary");
x.t("manage","child");
x.t("simulation","time");
x.t("following","format");
x.t("individual","arguments");
x.t("class","application_base");
x.t("class","invoke_child_task");
x.t("child_params","size");
x.t("child_params","self.my_completion_func");
x.t("bad","argument");
x.t("(b)","three");
x.t("c\u2019s","actions");
x.t("behavior","logic");
x.t("child","list");
x.t("child","tasks");
x.t("child","task\u2019s");
x.t("child","task");
x.t("merged","actions");
x.t("merged","flow");
x.t("performed","shown");
x.t("performed","first");
x.t("performed","task");
x.t("covered","u.s");
x.t("suffix","example");
x.t("suffix","given");
x.t("assumed","task");
x.t("completely","executed");
x.t("even","called");
x.t("object","python");
x.t("specify","callback");
x.t("specify","values");
x.t("specify","mapping");
x.t("comprising","four");
x.t("patents","complete");
}
