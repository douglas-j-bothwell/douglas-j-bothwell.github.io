function FileData_Pairs(x)
{
x.t("complex","application");
x.t("registers","python");
x.t("supports","keyword");
x.t("example","part");
x.t("example","new_msg");
x.t("create_message","method");
x.t("create_message","therefore");
x.t("equal","rest");
x.t("equal","my_string");
x.t("method","supports");
x.t("method","raises");
x.t("method","timeout");
x.t("method","object");
x.t("modeling","complex");
x.t("def","callback_func");
x.t("description","message");
x.t("callback","once");
x.t("callback","functions");
x.t("callback","function");
x.t("callback","explicit");
x.t("callback","triggered");
x.t("callback","callback_function");
x.t("once","example");
x.t("once","context");
x.t("home","back");
x.t("arguments","callback");
x.t("arguments","accessed");
x.t("arguments","return");
x.t("arguments","invalid.if");
x.t("action","implemented");
x.t("action","aps.message_stage.end");
x.t("action","data");
x.t("u.s","patents");
x.t("user","guide");
x.t("4096","client");
x.t("scripts","application_base");
x.t("implemented","using");
x.t("register","callback");
x.t("notices","section");
x.t("support","center");
x.t("application_base","syntax");
x.t("application_base","class");
x.t("callback_data","argument");
x.t("callback_data","tuple");
x.t("type","description");
x.t("type","none");
x.t("obtained","create_message");
x.t("self.register_timeout_callback","new_msg");
x.t("editing","designing");
x.t("trigger","callback");
x.t("bound","method");
x.t("self.create_message","4096");
x.t("back","top");
x.t("details","message");
x.t("goto_action","good");
x.t("block","transaction");
x.t("block","following");
x.t("top","2013");
x.t("initialization","block");
x.t("file","callback");
x.t("complete","patent");
x.t("guide","editing");
x.t("registering","callback");
x.t("10.0","callback");
x.t("register_receipt_callback","user");
x.t("register_receipt_callback","register_receipt_callback");
x.t("register_receipt_callback","abstract");
x.t("receipt","trigger");
x.t("receipt","details");
x.t("receipt","timeout");
x.t("argument","type");
x.t("raises","python");
x.t("part","looping");
x.t("none","example");
x.t("window","dynamically");
x.t("whiteboard","modeling");
x.t("whiteboard","window");
x.t("whiteboard","model");
x.t("place","register");
x.t("rest","body");
x.t("accessed","unpacking");
x.t("new_msg","self.create_message");
x.t("new_msg","self.sim_message");
x.t("new_msg","self.callback_func");
x.t("callback_func","self");
x.t("patent","notice");
x.t("functions","method");
x.t("functions","called");
x.t("functions","callback_function");
x.t("legal","notices");
x.t("logic","scripts");
x.t("logic","script");
x.t("python","function");
x.t("python","exception");
x.t("registered","register_timeout_callback");
x.t("point","arg1");
x.t("body","function");
x.t("notice","legal");
x.t("syntax","self.register_receipt_callback");
x.t("delay","receipt");
x.t("messages","initialization");
x.t("function","home");
x.t("function","block");
x.t("function","registered");
x.t("function","logic");
x.t("function","format");
x.t("function","explicit");
x.t("function","information");
x.t("function","called");
x.t("2013","riverbed");
x.t("aps.message_stage.end","self.register_receipt_callback");
x.t("software","may");
x.t("may","covered");
x.t("looping","action");
x.t("my_string","10.0");
x.t("my_string","arg2");
x.t("keyword","arguments");
x.t("format","def");
x.t("section","riverbed");
x.t("tuple","arguments");
x.t("tuple","arg1");
x.t("explicit","messages");
x.t("explicit","message");
x.t("self","action");
x.t("client","server");
x.t("designing","applications");
x.t("abstract","registers");
x.t("return","type");
x.t("message","register");
x.t("message","obtained");
x.t("message","receipt");
x.t("message","message");
x.t("message","whose");
x.t("message","received");
x.t("message","created");
x.t("message","callback_function");
x.t("message","object");
x.t("triggered","message");
x.t("whose","receipt");
x.t("technology","software");
x.t("self.sim_message","callback");
x.t("specific","message");
x.t("register_timeout_callback","message");
x.t("exception","arguments");
x.t("self.register_receipt_callback","new_msg");
x.t("self.register_receipt_callback","message");
x.t("unpacking","data");
x.t("context","explicit");
x.t("script","called");
x.t("good","place");
x.t("information","callback");
x.t("data","point");
x.t("data","tuple");
x.t("data","individual");
x.t("received","timeout");
x.t("received","class");
x.t("timeout","functions");
x.t("timeout","delay");
x.t("timeout","function");
x.t("defined","function");
x.t("arg1","equal");
x.t("arg1","arg2");
x.t("application","behavior");
x.t("arg2","equal");
x.t("arg2","data");
x.t("called","once");
x.t("called","callback_data");
x.t("called","specific");
x.t("called","note");
x.t("transaction","whiteboard");
x.t("note","method");
x.t("applications","transaction");
x.t("riverbed","support");
x.t("riverbed","technology");
x.t("created","transaction");
x.t("created","using");
x.t("call","self.register_timeout_callback");
x.t("self.callback_func","my_string");
x.t("model","file");
x.t("following","call");
x.t("individual","arguments");
x.t("class","application_base");
x.t("class","register_receipt_callback");
x.t("callback_function","callback_data");
x.t("callback_function","bound");
x.t("callback_function","defined");
x.t("using","create_message");
x.t("using","goto_action");
x.t("behavior","logic");
x.t("invalid.if","registering");
x.t("therefore","register");
x.t("covered","u.s");
x.t("object","python");
x.t("object","message");
x.t("server","action");
x.t("dynamically","created");
x.t("patents","complete");
}
