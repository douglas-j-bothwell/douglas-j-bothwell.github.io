function FileData_Pairs(x)
{
x.t("enabling","disabling");
x.t("supports","ethernet");
x.t("interfaces","tcpdump");
x.t("mopdl","abbreviations");
x.t("mopdl","iso");
x.t("isis","icmp");
x.t("complex","filter");
x.t("complex","cannot");
x.t("moment","dst");
x.t("equal","precedence");
x.t("equal","length");
x.t("example","ip6");
x.t("example","ether");
x.t("example","authentication");
x.t("example","host");
x.t("looks","local");
x.t("so-called","snap");
x.t("ieee","802.1q");
x.t("four","defaults");
x.t("passed","tcpdump");
x.t("available","http://www.tcpdump.org/");
x.t("protocols","lat");
x.t("protocols","expr");
x.t("protocols","consistent");
x.t("protocols","vlan");
x.t("protocols","ignored");
x.t("protocols","slip");
x.t("protocols","note");
x.t("possible","types");
x.t("possible","protos");
x.t("possible","directions");
x.t("ftp-data","tcp");
x.t("ftp-data","domain");
x.t("ftp-data","dir");
x.t("ftp-data","save");
x.t("icmp","abbreviations");
x.t("icmp","keywords");
x.t("icmp","icmp6");
x.t("icmp","igrp");
x.t("icmp","ip6");
x.t("net/len","true");
x.t("indicated","keyword");
x.t("indicated","protocol");
x.t("combined","using");
x.t("alternation","negation");
x.t("alternation","concatenation");
x.t("pattern","gateway");
x.t("right","note");
x.t("captures","traffic");
x.t("captures","section");
x.t("inbound","outbound");
x.t("lists","omitted");
x.t("lists","allowable");
x.t("prepended","keywords");
x.t("protochain","matches");
x.t("protochain","protocol");
x.t("applied","tcp");
x.t("appresponse","appliance");
x.t("appresponse","user");
x.t("table","complex");
x.t("table","lists");
x.t("table","tcpdump");
x.t("description","dst");
x.t("ambiguous","name");
x.t("currently","know");
x.t("disabling","applying");
x.t("appliance","supports");
x.t("kinds","qualifier");
x.t("lat","sca");
x.t("lat","moprc");
x.t("source","field");
x.t("source","destination");
x.t("source","address");
x.t("source","port");
x.t("normal","binary");
x.t("binary","operators");
x.t("layer","index");
x.t("layer","given");
x.t("instance","tcp");
x.t("always","means");
x.t("negation","concatenation");
x.t("negation","highest");
x.t("required","concatenation");
x.t("home","back");
x.t("apply","filters");
x.t("apply","ipv4");
x.t("all-zeroes","all-ones");
x.t("upper-layer","protocol");
x.t("arguments","passed");
x.t("arguments","whichever");
x.t("arguments","concatenated");
x.t("u.s","patents");
x.t("user","guide");
x.t("ethernet","source");
x.t("ethernet","network");
x.t("ethernet","destination");
x.t("ethernet","multicast");
x.t("ethernet","broadcast");
x.t("refers","possible");
x.t("ehost","ehost");
x.t("ehost","true");
x.t("ehost","gateway");
x.t("ehost","syntax");
x.t("ehost","may");
x.t("ehost","ether");
x.t("ehost","host");
x.t("field","interest");
x.t("field","packet");
x.t("administrator","guide");
x.t("bar","means");
x.t("bar","port");
x.t("ipv6-enabled","configuration");
x.t("abbreviations","proto");
x.t("abbreviations","ether");
x.t("fragmented","datagrams");
x.t("notices","section");
x.t("type","qualifiers");
x.t("type","protocol");
x.t("type","qualifier");
x.t("type","assumed");
x.t("thing","name");
x.t("relop","expr");
x.t("[6:2]","0x1fff");
x.t("net","net/len");
x.t("net","bar");
x.t("net","net");
x.t("net","true");
x.t("net","128.3");
x.t("net","mask");
x.t("net","may");
x.t("net","specific");
x.t("net","port");
x.t("net","netmask");
x.t("decnet","lat");
x.t("packets","options");
x.t("packets","whose");
x.t("packets","include");
x.t("hop-by-hop","option");
x.t("llc","header");
x.t("expr","relop");
x.t("expr","size");
x.t("expr","true");
x.t("expr","arithmetic");
x.t("left","right");
x.t("sections","appresponse");
x.t("i.e","ethernet");
x.t("i.e","point-to-point");
x.t("esis","isis");
x.t("keywords","don't");
x.t("keywords","tcp");
x.t("keywords","escaped");
x.t("keywords","arp");
x.t("don't","follow");
x.t("multiple","arguments");
x.t("multiple","addresses");
x.t("emitted","primitive");
x.t("inside","packet");
x.t("filters","starting");
x.t("filters","packet");
x.t("filters","using");
x.t("rarp","abbreviations");
x.t("rarp","decnet");
x.t("rarp","net");
x.t("rarp","tcp");
x.t("rarp","src");
x.t("rarp","ip6");
x.t("rarp","note");
x.t("primitive","complex");
x.t("primitive","description");
x.t("primitive","keywords");
x.t("primitive","chase");
x.t("networks","(4)");
x.t("checks","all-zeroes");
x.t("assumes","filtering");
x.t("back","top");
x.t("consists","primitives");
x.t("link","control");
x.t("link","layers");
x.t("details","src");
x.t("access","data");
x.t("precedence","alternation");
x.t("precedence","associate");
x.t("single","quoted");
x.t("single","argument");
x.t("quoted","argument");
x.t("usually","layered");
x.t("usually","consist");
x.t("iso","esis");
x.t("ethers","(3n)");
x.t("/etc/networks","network");
x.t("chain","example");
x.t("chain","ip6");
x.t("chain","packet");
x.t("all-ones","broadcast");
x.t("top","2014");
x.t("top","fddi");
x.t("size","proto");
x.t("size","optional");
x.t("catches","packets");
x.t("catches","unfragmented");
x.t("catches","multicast");
x.t("0x1fff","catches");
x.t("outbound","qualifiers");
x.t("list","allowable");
x.t("found","/etc/hosts");
x.t("backslash","c-shell");
x.t("backslash","case");
x.t("indicates","number");
x.t("indicates","protocol");
x.t("short","host");
x.t("udp","icmp");
x.t("udp","upper-layer");
x.t("udp","tcp");
x.t("udp","index");
x.t("udp","e.g");
x.t("udp","port");
x.t("udp","(4p)");
x.t("group","primitives");
x.t("complete","patent");
x.t("filter","syntax");
x.t("filter","expressions");
x.t("guide","berkeley");
x.t("guide","packet");
x.t("network","interfaces");
x.t("network","number");
x.t("(3n)","numeric");
x.t("bits","wide");
x.t("check","implicitly");
x.t("traffic","src");
x.t("traffic","udp/who");
x.t("traffic","expression");
x.t("traffic","monitoring");
x.t("traffic","port");
x.t("configuring","high-speed");
x.t("tcp","packets");
x.t("tcp","udp");
x.t("tcp","dst");
x.t("tcp","src");
x.t("tcp","header");
x.t("tcp","[0]");
x.t("tcp","port");
x.t("tcp","(4p)");
x.t("tcp","note");
x.t("tcp","protocol");
x.t("len","bits");
x.t("len","length");
x.t("len","gives");
x.t("parse","protocols");
x.t("spaces","parsed");
x.t("primitives","table");
x.t("primitives","primitive");
x.t("primitives","usually");
x.t("primitives","primitives");
x.t("primitives","tcpdump");
x.t("primitives","qualifiers");
x.t("primitives","operators");
x.t("primitives","may");
x.t("primitives","e.g");
x.t("primitives","following");
x.t("desired","direction");
x.t("built","using");
x.t("true","ethernet");
x.t("true","address");
x.t("true","relation");
x.t("true","ipv4/v6");
x.t("true","packet");
x.t("true","either");
x.t("via","backslash");
x.t("specified","encountered");
x.t("byte","tcp");
x.t("byte","intervening");
x.t("byte","offset");
x.t("defaults","length");
x.t("tcpdump","currently");
x.t("tcpdump","assumes");
x.t("tcpdump","primitives");
x.t("tcpdump","somewhat");
x.t("tcpdump","expressions");
x.t("tcpdump","documentation");
x.t("tcpdump","expression");
x.t("tcpdump","either");
x.t("qualifiers","primitives");
x.t("qualifiers","three");
x.t("qualifiers","restrict");
x.t("qualifiers","say");
x.t("qualifiers","used");
x.t("qualifiers","specify");
x.t("name","multiple");
x.t("name","/etc/networks");
x.t("name","found");
x.t("name","src");
x.t("name","number");
x.t("name","/etc/ethers");
x.t("name","ip6");
x.t("name","used");
x.t("direction","proto");
x.t("direction","and/or");
x.t("(4)","details");
x.t("wide","may");
x.t("slow","protochain");
x.t("operation","note");
x.t("references","non-ethernet");
x.t("gateway","i.e");
x.t("gateway","broadcast");
x.t("gateway","host");
x.t("exactly","tcp");
x.t("addresses","address");
x.t("identifiers","keywords");
x.t("identifiers","tcp");
x.t("dst","ehost");
x.t("dst","net");
x.t("dst","dst");
x.t("dst","src");
x.t("dst","e.g");
x.t("dst","host");
x.t("dst","port");
x.t("dst","note");
x.t("dst","assumed");
x.t("neither","source");
x.t("/etc/hosts","/etc/ethers");
x.t("ipv4","ipv6");
x.t("ipv4","ether");
x.t("bytes","field");
x.t("argument","multiple");
x.t("src","ehost");
x.t("src","net");
x.t("src","dst");
x.t("src","foo");
x.t("src","host");
x.t("src","port");
x.t("filtering","protocol");
x.t("zero","fragmented");
x.t("tokens","juxtaposition");
x.t("(bpf)","filters");
x.t("combine","primitives");
x.t("\\ip","host");
x.t("ipv6","net");
x.t("ipv6","fixed");
x.t("ipv6","header");
x.t("ipv6","multicast");
x.t("ipv6","packet");
x.t("escaped","negation");
x.t("escaped","via");
x.t("optimized","bpf");
x.t("constants","expressed");
x.t("standard","syntax");
x.t("whichever","convenient");
x.t("consistent","type");
x.t("destination","field");
x.t("destination","address");
x.t("destination","host");
x.t("destination","port");
x.t("destination","packet");
x.t("address","ehost");
x.t("address","name");
x.t("address","matches");
x.t("address","host");
x.t("address","packet");
x.t("address","checked");
x.t("composed","integer");
x.t("accessors","access");
x.t("concatenation","equal");
x.t("concatenation","alternation");
x.t("concatenation","identifier");
x.t("icmp6","tcp");
x.t("ip6/udp","destination");
x.t("local","subnet");
x.t("shorthand","ether");
x.t("three","different");
x.t("128.3","tcp");
x.t("128.3","src");
x.t("128.3","port");
x.t("mask","true");
x.t("mask","mask");
x.t("mask","ether");
x.t("prints","tcp/login");
x.t("prints","tcp/domain");
x.t("c-shell","note");
x.t("contain","example");
x.t("relative","indicated");
x.t("frag","zero");
x.t("patent","notice");
x.t("legal","notices");
x.t("legal","syntax");
x.t("ip6/tcp","ip6/udp");
x.t("vlan","[vlan_id]");
x.t("vlan","packet");
x.t("[vlan_id]","true");
x.t("[vlan_id]","specified");
x.t("recent","keyword");
x.t("concatenated","spaces");
x.t("equivalent","len");
x.t("equivalent","ip6");
x.t("equivalent","ether");
x.t("equivalent","expression");
x.t("igrp","udp");
x.t("notice","legal");
x.t("syntax","normal");
x.t("syntax","administrator");
x.t("syntax","net");
x.t("syntax","proto");
x.t("syntax","berkeley");
x.t("syntax","valid");
x.t("syntax","work");
x.t("syntax","specify");
x.t("logical","link");
x.t("know","parse");
x.t("operators","length");
x.t("operators","parentheses");
x.t("metacharacters","easier");
x.t("preceded","qualifiers");
x.t("means","tcp");
x.t("means","first");
x.t("means","arp");
x.t("domain","exactly");
x.t("domain","prints");
x.t("domain","allowable");
x.t("somewhat","slow");
x.t("fixed","future");
x.t("options","expression");
x.t("first","byte");
x.t("number","ambiguous");
x.t("number","refers");
x.t("number","net");
x.t("number","networks");
x.t("number","ethers");
x.t("number","name");
x.t("number","bytes");
x.t("number","preceded");
x.t("number","protocol");
x.t("number","names");
x.t("number","checked");
x.t("/etc/ethers","equivalent");
x.t("/etc/ethers","number");
x.t("control","(llc)");
x.t("decoding","offsets");
x.t("length","true");
x.t("length","equivalent");
x.t("length","proto");
x.t("length","greater");
x.t("length","less");
x.t("length","packet");
x.t("length","operator");
x.t("802.2","logical");
x.t("relation","holds");
x.t("combining","primitives");
x.t("expressions","prepended");
x.t("expressions","list");
x.t("expressions","built");
x.t("expressions","expression");
x.t("different","kinds");
x.t("dir","qualifiers");
x.t("dir","qualifier");
x.t("particular","transfer");
x.t("particular","protocol");
x.t("arp","net");
x.t("arp","rarp");
x.t("arp","protocol");
x.t("words","combine");
x.t("may","combined");
x.t("may","contain");
x.t("may","qualified");
x.t("may","either");
x.t("may","covered");
x.t("cannot","optimized");
x.t("parsed","home");
x.t("2014","riverbed");
x.t("software","may");
x.t("starting","stopping");
x.t("extracted","tcpdump");
x.t("ignored","appresponse");
x.t("proto","expr");
x.t("proto","qualifiers");
x.t("proto","\\ip");
x.t("proto","ip6");
x.t("proto","ether");
x.t("proto","above");
x.t("proto","protocol");
x.t("proto","qualifier");
x.t("udp/domain","traffic");
x.t("index","operation");
x.t("index","operations");
x.t("format","apply");
x.t("format","ip6");
x.t("format","ether");
x.t("section","extracted");
x.t("section","riverbed");
x.t("types","apply");
x.t("types","host");
x.t("match","particular");
x.t("match","ether");
x.t("identical","qualifier");
x.t("keyword","len");
x.t("keyword","recent");
x.t("keyword","optional");
x.t("keyword","assumed");
x.t("changes","decoding");
x.t("intervening","fragment");
x.t("juxtaposition","required");
x.t("omitted","e.g");
x.t("offsets","remainder");
x.t("interest","either");
x.t("explicit","tokens");
x.t("non-ethernet","protocols");
x.t("protos","ether");
x.t("ip6","protochain");
x.t("ip6","indicates");
x.t("ip6","arp");
x.t("ip6","proto");
x.t("ip6","multicast");
x.t("ip6","host");
x.t("follow","pattern");
x.t("code","emitted");
x.t("code","tcpdump");
x.t("optimizer","code");
x.t("identifier","given");
x.t("identifier","fddi");
x.t("restrict","match");
x.t("bpf","code");
x.t("bpf","optimizer");
x.t("(llc)","header");
x.t("unfragmented","datagrams");
x.t("datagrams","check");
x.t("datagrams","frag");
x.t("matches","net");
x.t("matches","tcp");
x.t("matches","ipv6");
x.t("header","so-called");
x.t("header","type");
x.t("header","hop-by-hop");
x.t("header","llc");
x.t("header","chain");
x.t("header","usually");
x.t("header","tcp");
x.t("header","tcpdump");
x.t("header","ipv6");
x.t("header","means");
x.t("header","bpf");
x.t("header","routing");
x.t("header","protocol");
x.t("option","header");
x.t("given","expr");
x.t("given","without");
x.t("documentation","available");
x.t("kind","thing");
x.t("e.g","tcp");
x.t("e.g","dst");
x.t("e.g","src");
x.t("e.g","ether");
x.t("e.g","fddi");
x.t("e.g","host");
x.t("greater","equal");
x.t("greater","length");
x.t("greater","arithmetic");
x.t("ftp","ftp-data");
x.t("ftp","tcp");
x.t("ftp","port");
x.t("udp/who","traffic");
x.t("whose","source");
x.t("multicast","traffic");
x.t("multicast","true");
x.t("multicast","packet");
x.t("identification","comes");
x.t("parentheses","special");
x.t("berkeley","packet");
x.t("and/or","possible");
x.t("null","link");
x.t("sca","moprc");
x.t("less","equal");
x.t("less","length");
x.t("less","greater");
x.t("typing","identical");
x.t("assumption","packet");
x.t("layers","i.e");
x.t("ether","type");
x.t("ether","dst");
x.t("ether","src");
x.t("ether","proto");
x.t("ether","keyword");
x.t("ether","multicast");
x.t("ether","fddi");
x.t("ether","broadcast");
x.t("ether","[0]");
x.t("ether","host");
x.t("configuration","moment");
x.t("qualified","src");
x.t("include","llc");
x.t("fragment","combining");
x.t("technology","software");
x.t("http://www.tcpdump.org/","references");
x.t("value","port");
x.t("ace","short");
x.t("ace","expression");
x.t("ace","confused");
x.t("convenient","generally");
x.t("easier","pass");
x.t("specific","netmask");
x.t("holds","relop");
x.t("gives","length");
x.t("0xf","catches");
x.t("fddi","packets");
x.t("fddi","arp");
x.t("fddi","ip6");
x.t("fddi","header");
x.t("fddi","e.g");
x.t("fddi","protocol");
x.t("broadcast","true");
x.t("broadcast","less");
x.t("broadcast","packet");
x.t("broadcast","conventions");
x.t("tcp/login","traffic");
x.t("expression","arguments");
x.t("expression","[6:2]");
x.t("expression","consists");
x.t("expression","composed");
x.t("expression","format");
x.t("expression","changes");
x.t("expression","assumption");
x.t("expression","ether");
x.t("expression","[0]");
x.t("expression","contains");
x.t("foo","net");
x.t("foo","dst");
x.t("foo","means");
x.t("foo","arp");
x.t("foo","port");
x.t("foo","except");
x.t("slip","inbound");
x.t("latter","legal");
x.t("valid","ipv6");
x.t("authentication","header");
x.t("[0]","always");
x.t("[0]","catches");
x.t("[0]","multicast");
x.t("[0]","0xf");
x.t("encountered","expression");
x.t("shell","escaped");
x.t("shell","metacharacters");
x.t("transfer","direction");
x.t("ip/udp","ip6/tcp");
x.t("monitoring","enabling");
x.t("monitoring","described");
x.t("high-speed","captures");
x.t("host","ehost");
x.t("host","net");
x.t("host","true");
x.t("host","name");
x.t("host","gateway");
x.t("host","neither");
x.t("host","equivalent");
x.t("host","may");
x.t("host","expressions");
x.t("host","ace");
x.t("host","foo");
x.t("host","host");
x.t("host","above");
x.t("host","used");
x.t("host","assumed");
x.t("/etc/services","tcp");
x.t("optional","indicates");
x.t("optional","shorthand");
x.t("optional","broadcast");
x.t("data","inside");
x.t("data","accessors");
x.t("save","typing");
x.t("ip/tcp","ip/udp");
x.t("future","byte");
x.t("confused","host");
x.t("stopping","configuring");
x.t("routing","header");
x.t("case","fddi");
x.t("implicitly","applied");
x.t("highest","precedence");
x.t("described","following");
x.t("port","ftp-data");
x.t("port","type");
x.t("port","true");
x.t("port","means");
x.t("port","domain");
x.t("port","number");
x.t("port","expressions");
x.t("port","proto");
x.t("port","matches");
x.t("port","e.g");
x.t("port","ftp");
x.t("port","less");
x.t("port","value");
x.t("port","port");
x.t("port","513");
x.t("port","above");
x.t("port","packet");
x.t("port","additionally");
x.t("above","protocols");
x.t("above","host");
x.t("above","port");
x.t("(4p)","udp");
x.t("(4p)","name");
x.t("(4p)","protocol");
x.t("513","prints");
x.t("protocol","possible");
x.t("protocol","layer");
x.t("protocol","type");
x.t("protocol","true");
x.t("protocol","ipv4");
x.t("protocol","equivalent");
x.t("protocol","number");
x.t("protocol","arp");
x.t("protocol","types");
x.t("protocol","identifier");
x.t("protocol","header");
x.t("protocol","identification");
x.t("protocol","protocol");
x.t("protocol","note");
x.t("protocol","checked");
x.t("ipv4/v6","source");
x.t("ipv4/v6","destination");
x.t("ipv4/v6","address");
x.t("note","primitive");
x.t("note","tcp");
x.t("note","tcpdump");
x.t("note","identifiers");
x.t("note","syntax");
x.t("note","explicit");
x.t("802.1q","vlan");
x.t("integer","constants");
x.t("two","four");
x.t("numeric","format");
x.t("work","ipv6-enabled");
x.t("netmask","len");
x.t("netmask","may");
x.t("comes","802.2");
x.t("offset","relative");
x.t("riverbed","support");
x.t("riverbed","technology");
x.t("packet","ieee");
x.t("packet","example");
x.t("packet","captures");
x.t("packet","source");
x.t("packet","ethernet");
x.t("packet","filters");
x.t("packet","checks");
x.t("packet","filter");
x.t("packet","network");
x.t("packet","tcp");
x.t("packet","(bpf)");
x.t("packet","ipv6");
x.t("packet","[vlan_id]");
x.t("packet","vlan");
x.t("packet","length");
x.t("packet","may");
x.t("packet","ip6");
x.t("packet","multicast");
x.t("packet","ether");
x.t("packet","broadcast");
x.t("packet","host");
x.t("packet","data");
x.t("packet","ip/tcp");
x.t("packet","port");
x.t("packet","(4p)");
x.t("packet","protocol");
x.t("packet","packet");
x.t("packet","used");
x.t("packet","following");
x.t("packet","contains");
x.t("numbers","host");
x.t("chase","protocol");
x.t("associate","left");
x.t("following","table");
x.t("following","sections");
x.t("following","syntax");
x.t("say","kind");
x.t("used","host");
x.t("used","/etc/services");
x.t("used","port");
x.t("used","either");
x.t("used","specify");
x.t("except","latter");
x.t("special","primitive");
x.t("special","shell");
x.t("special","packet");
x.t("either","source");
x.t("either","ethernet");
x.t("either","single");
x.t("either","name");
x.t("either","address");
x.t("either","ipv4/v6");
x.t("either","two");
x.t("either","names");
x.t("subnet","mask");
x.t("using","tcpdump");
x.t("using","words");
x.t("using","parenthesized");
x.t("qualifier","protocols");
x.t("qualifier","lists");
x.t("qualifier","type");
x.t("qualifier","src");
x.t("qualifier","host");
x.t("additionally","special");
x.t("arithmetic","expressions");
x.t("arithmetic","expression");
x.t("layered","top");
x.t("snap","format");
x.t("parenthesized","group");
x.t("allowable","primitives");
x.t("allowable","tcpdump");
x.t("remainder","expression");
x.t("expressed","standard");
x.t("pass","single");
x.t("applying","packet");
x.t("directions","src");
x.t("names","icmp");
x.t("names","numbers");
x.t("operator","indicated");
x.t("operator","special");
x.t("operations","instance");
x.t("without","keyword");
x.t("covered","u.s");
x.t("point-to-point","protocols");
x.t("moprc","mopdl");
x.t("assumed","example");
x.t("assumed","dir");
x.t("assumed","e.g");
x.t("assumed","null");
x.t("tcp/domain","udp/domain");
x.t("conventions","looks");
x.t("specify","desired");
x.t("specify","particular");
x.t("specify","packet");
x.t("consist","name");
x.t("checked","number");
x.t("checked","match");
x.t("checked","e.g");
x.t("contains","shell");
x.t("contains","protocol");
x.t("generally","expression");
x.t("patents","complete");
}
